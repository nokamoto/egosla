/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
var google_protobuf_field_mask_pb = require('google-protobuf/google/protobuf/field_mask_pb.js');
goog.exportSymbol('proto.nokamoto.github.com.egosla.api.CreateSubscriptionRequest', null, global);
goog.exportSymbol('proto.nokamoto.github.com.egosla.api.DeleteSubscriptionRequest', null, global);
goog.exportSymbol('proto.nokamoto.github.com.egosla.api.GetSubscriptionRequest', null, global);
goog.exportSymbol('proto.nokamoto.github.com.egosla.api.ListSubscriptionRequest', null, global);
goog.exportSymbol('proto.nokamoto.github.com.egosla.api.ListSubscriptionResponse', null, global);
goog.exportSymbol('proto.nokamoto.github.com.egosla.api.Subscription', null, global);
goog.exportSymbol('proto.nokamoto.github.com.egosla.api.UpdateSubscriptionRequest', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nokamoto.github.com.egosla.api.Subscription = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nokamoto.github.com.egosla.api.Subscription, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.nokamoto.github.com.egosla.api.Subscription.displayName = 'proto.nokamoto.github.com.egosla.api.Subscription';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nokamoto.github.com.egosla.api.Subscription.prototype.toObject = function(opt_includeInstance) {
  return proto.nokamoto.github.com.egosla.api.Subscription.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nokamoto.github.com.egosla.api.Subscription} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nokamoto.github.com.egosla.api.Subscription.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    watcher: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nokamoto.github.com.egosla.api.Subscription}
 */
proto.nokamoto.github.com.egosla.api.Subscription.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nokamoto.github.com.egosla.api.Subscription;
  return proto.nokamoto.github.com.egosla.api.Subscription.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nokamoto.github.com.egosla.api.Subscription} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nokamoto.github.com.egosla.api.Subscription}
 */
proto.nokamoto.github.com.egosla.api.Subscription.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setWatcher(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nokamoto.github.com.egosla.api.Subscription.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nokamoto.github.com.egosla.api.Subscription.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nokamoto.github.com.egosla.api.Subscription} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nokamoto.github.com.egosla.api.Subscription.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getWatcher();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.nokamoto.github.com.egosla.api.Subscription.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.nokamoto.github.com.egosla.api.Subscription.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string watcher = 2;
 * @return {string}
 */
proto.nokamoto.github.com.egosla.api.Subscription.prototype.getWatcher = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.nokamoto.github.com.egosla.api.Subscription.prototype.setWatcher = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nokamoto.github.com.egosla.api.CreateSubscriptionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nokamoto.github.com.egosla.api.CreateSubscriptionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.nokamoto.github.com.egosla.api.CreateSubscriptionRequest.displayName = 'proto.nokamoto.github.com.egosla.api.CreateSubscriptionRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nokamoto.github.com.egosla.api.CreateSubscriptionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.nokamoto.github.com.egosla.api.CreateSubscriptionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nokamoto.github.com.egosla.api.CreateSubscriptionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nokamoto.github.com.egosla.api.CreateSubscriptionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    subscription: (f = msg.getSubscription()) && proto.nokamoto.github.com.egosla.api.Subscription.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nokamoto.github.com.egosla.api.CreateSubscriptionRequest}
 */
proto.nokamoto.github.com.egosla.api.CreateSubscriptionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nokamoto.github.com.egosla.api.CreateSubscriptionRequest;
  return proto.nokamoto.github.com.egosla.api.CreateSubscriptionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nokamoto.github.com.egosla.api.CreateSubscriptionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nokamoto.github.com.egosla.api.CreateSubscriptionRequest}
 */
proto.nokamoto.github.com.egosla.api.CreateSubscriptionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.nokamoto.github.com.egosla.api.Subscription;
      reader.readMessage(value,proto.nokamoto.github.com.egosla.api.Subscription.deserializeBinaryFromReader);
      msg.setSubscription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nokamoto.github.com.egosla.api.CreateSubscriptionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nokamoto.github.com.egosla.api.CreateSubscriptionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nokamoto.github.com.egosla.api.CreateSubscriptionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nokamoto.github.com.egosla.api.CreateSubscriptionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSubscription();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.nokamoto.github.com.egosla.api.Subscription.serializeBinaryToWriter
    );
  }
};


/**
 * optional Subscription subscription = 1;
 * @return {?proto.nokamoto.github.com.egosla.api.Subscription}
 */
proto.nokamoto.github.com.egosla.api.CreateSubscriptionRequest.prototype.getSubscription = function() {
  return /** @type{?proto.nokamoto.github.com.egosla.api.Subscription} */ (
    jspb.Message.getWrapperField(this, proto.nokamoto.github.com.egosla.api.Subscription, 1));
};


/** @param {?proto.nokamoto.github.com.egosla.api.Subscription|undefined} value */
proto.nokamoto.github.com.egosla.api.CreateSubscriptionRequest.prototype.setSubscription = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.nokamoto.github.com.egosla.api.CreateSubscriptionRequest.prototype.clearSubscription = function() {
  this.setSubscription(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nokamoto.github.com.egosla.api.CreateSubscriptionRequest.prototype.hasSubscription = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nokamoto.github.com.egosla.api.DeleteSubscriptionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nokamoto.github.com.egosla.api.DeleteSubscriptionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.nokamoto.github.com.egosla.api.DeleteSubscriptionRequest.displayName = 'proto.nokamoto.github.com.egosla.api.DeleteSubscriptionRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nokamoto.github.com.egosla.api.DeleteSubscriptionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.nokamoto.github.com.egosla.api.DeleteSubscriptionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nokamoto.github.com.egosla.api.DeleteSubscriptionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nokamoto.github.com.egosla.api.DeleteSubscriptionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nokamoto.github.com.egosla.api.DeleteSubscriptionRequest}
 */
proto.nokamoto.github.com.egosla.api.DeleteSubscriptionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nokamoto.github.com.egosla.api.DeleteSubscriptionRequest;
  return proto.nokamoto.github.com.egosla.api.DeleteSubscriptionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nokamoto.github.com.egosla.api.DeleteSubscriptionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nokamoto.github.com.egosla.api.DeleteSubscriptionRequest}
 */
proto.nokamoto.github.com.egosla.api.DeleteSubscriptionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nokamoto.github.com.egosla.api.DeleteSubscriptionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nokamoto.github.com.egosla.api.DeleteSubscriptionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nokamoto.github.com.egosla.api.DeleteSubscriptionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nokamoto.github.com.egosla.api.DeleteSubscriptionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.nokamoto.github.com.egosla.api.DeleteSubscriptionRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.nokamoto.github.com.egosla.api.DeleteSubscriptionRequest.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nokamoto.github.com.egosla.api.GetSubscriptionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nokamoto.github.com.egosla.api.GetSubscriptionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.nokamoto.github.com.egosla.api.GetSubscriptionRequest.displayName = 'proto.nokamoto.github.com.egosla.api.GetSubscriptionRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nokamoto.github.com.egosla.api.GetSubscriptionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.nokamoto.github.com.egosla.api.GetSubscriptionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nokamoto.github.com.egosla.api.GetSubscriptionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nokamoto.github.com.egosla.api.GetSubscriptionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nokamoto.github.com.egosla.api.GetSubscriptionRequest}
 */
proto.nokamoto.github.com.egosla.api.GetSubscriptionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nokamoto.github.com.egosla.api.GetSubscriptionRequest;
  return proto.nokamoto.github.com.egosla.api.GetSubscriptionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nokamoto.github.com.egosla.api.GetSubscriptionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nokamoto.github.com.egosla.api.GetSubscriptionRequest}
 */
proto.nokamoto.github.com.egosla.api.GetSubscriptionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nokamoto.github.com.egosla.api.GetSubscriptionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nokamoto.github.com.egosla.api.GetSubscriptionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nokamoto.github.com.egosla.api.GetSubscriptionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nokamoto.github.com.egosla.api.GetSubscriptionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.nokamoto.github.com.egosla.api.GetSubscriptionRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.nokamoto.github.com.egosla.api.GetSubscriptionRequest.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nokamoto.github.com.egosla.api.ListSubscriptionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nokamoto.github.com.egosla.api.ListSubscriptionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.nokamoto.github.com.egosla.api.ListSubscriptionRequest.displayName = 'proto.nokamoto.github.com.egosla.api.ListSubscriptionRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nokamoto.github.com.egosla.api.ListSubscriptionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.nokamoto.github.com.egosla.api.ListSubscriptionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nokamoto.github.com.egosla.api.ListSubscriptionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nokamoto.github.com.egosla.api.ListSubscriptionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    pageToken: jspb.Message.getFieldWithDefault(msg, 1, ""),
    pageSize: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nokamoto.github.com.egosla.api.ListSubscriptionRequest}
 */
proto.nokamoto.github.com.egosla.api.ListSubscriptionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nokamoto.github.com.egosla.api.ListSubscriptionRequest;
  return proto.nokamoto.github.com.egosla.api.ListSubscriptionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nokamoto.github.com.egosla.api.ListSubscriptionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nokamoto.github.com.egosla.api.ListSubscriptionRequest}
 */
proto.nokamoto.github.com.egosla.api.ListSubscriptionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPageToken(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPageSize(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nokamoto.github.com.egosla.api.ListSubscriptionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nokamoto.github.com.egosla.api.ListSubscriptionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nokamoto.github.com.egosla.api.ListSubscriptionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nokamoto.github.com.egosla.api.ListSubscriptionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPageToken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPageSize();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional string page_token = 1;
 * @return {string}
 */
proto.nokamoto.github.com.egosla.api.ListSubscriptionRequest.prototype.getPageToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.nokamoto.github.com.egosla.api.ListSubscriptionRequest.prototype.setPageToken = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 page_size = 2;
 * @return {number}
 */
proto.nokamoto.github.com.egosla.api.ListSubscriptionRequest.prototype.getPageSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.nokamoto.github.com.egosla.api.ListSubscriptionRequest.prototype.setPageSize = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nokamoto.github.com.egosla.api.ListSubscriptionResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.nokamoto.github.com.egosla.api.ListSubscriptionResponse.repeatedFields_, null);
};
goog.inherits(proto.nokamoto.github.com.egosla.api.ListSubscriptionResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.nokamoto.github.com.egosla.api.ListSubscriptionResponse.displayName = 'proto.nokamoto.github.com.egosla.api.ListSubscriptionResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.nokamoto.github.com.egosla.api.ListSubscriptionResponse.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nokamoto.github.com.egosla.api.ListSubscriptionResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.nokamoto.github.com.egosla.api.ListSubscriptionResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nokamoto.github.com.egosla.api.ListSubscriptionResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nokamoto.github.com.egosla.api.ListSubscriptionResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    nextPageToken: jspb.Message.getFieldWithDefault(msg, 1, ""),
    subscriptionsList: jspb.Message.toObjectList(msg.getSubscriptionsList(),
    proto.nokamoto.github.com.egosla.api.Subscription.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nokamoto.github.com.egosla.api.ListSubscriptionResponse}
 */
proto.nokamoto.github.com.egosla.api.ListSubscriptionResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nokamoto.github.com.egosla.api.ListSubscriptionResponse;
  return proto.nokamoto.github.com.egosla.api.ListSubscriptionResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nokamoto.github.com.egosla.api.ListSubscriptionResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nokamoto.github.com.egosla.api.ListSubscriptionResponse}
 */
proto.nokamoto.github.com.egosla.api.ListSubscriptionResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNextPageToken(value);
      break;
    case 2:
      var value = new proto.nokamoto.github.com.egosla.api.Subscription;
      reader.readMessage(value,proto.nokamoto.github.com.egosla.api.Subscription.deserializeBinaryFromReader);
      msg.addSubscriptions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nokamoto.github.com.egosla.api.ListSubscriptionResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nokamoto.github.com.egosla.api.ListSubscriptionResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nokamoto.github.com.egosla.api.ListSubscriptionResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nokamoto.github.com.egosla.api.ListSubscriptionResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNextPageToken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSubscriptionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.nokamoto.github.com.egosla.api.Subscription.serializeBinaryToWriter
    );
  }
};


/**
 * optional string next_page_token = 1;
 * @return {string}
 */
proto.nokamoto.github.com.egosla.api.ListSubscriptionResponse.prototype.getNextPageToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.nokamoto.github.com.egosla.api.ListSubscriptionResponse.prototype.setNextPageToken = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated Subscription subscriptions = 2;
 * @return {!Array<!proto.nokamoto.github.com.egosla.api.Subscription>}
 */
proto.nokamoto.github.com.egosla.api.ListSubscriptionResponse.prototype.getSubscriptionsList = function() {
  return /** @type{!Array<!proto.nokamoto.github.com.egosla.api.Subscription>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.nokamoto.github.com.egosla.api.Subscription, 2));
};


/** @param {!Array<!proto.nokamoto.github.com.egosla.api.Subscription>} value */
proto.nokamoto.github.com.egosla.api.ListSubscriptionResponse.prototype.setSubscriptionsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.nokamoto.github.com.egosla.api.Subscription=} opt_value
 * @param {number=} opt_index
 * @return {!proto.nokamoto.github.com.egosla.api.Subscription}
 */
proto.nokamoto.github.com.egosla.api.ListSubscriptionResponse.prototype.addSubscriptions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.nokamoto.github.com.egosla.api.Subscription, opt_index);
};


proto.nokamoto.github.com.egosla.api.ListSubscriptionResponse.prototype.clearSubscriptionsList = function() {
  this.setSubscriptionsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nokamoto.github.com.egosla.api.UpdateSubscriptionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nokamoto.github.com.egosla.api.UpdateSubscriptionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.nokamoto.github.com.egosla.api.UpdateSubscriptionRequest.displayName = 'proto.nokamoto.github.com.egosla.api.UpdateSubscriptionRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nokamoto.github.com.egosla.api.UpdateSubscriptionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.nokamoto.github.com.egosla.api.UpdateSubscriptionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nokamoto.github.com.egosla.api.UpdateSubscriptionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nokamoto.github.com.egosla.api.UpdateSubscriptionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    subscription: (f = msg.getSubscription()) && proto.nokamoto.github.com.egosla.api.Subscription.toObject(includeInstance, f),
    updateMask: (f = msg.getUpdateMask()) && google_protobuf_field_mask_pb.FieldMask.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nokamoto.github.com.egosla.api.UpdateSubscriptionRequest}
 */
proto.nokamoto.github.com.egosla.api.UpdateSubscriptionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nokamoto.github.com.egosla.api.UpdateSubscriptionRequest;
  return proto.nokamoto.github.com.egosla.api.UpdateSubscriptionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nokamoto.github.com.egosla.api.UpdateSubscriptionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nokamoto.github.com.egosla.api.UpdateSubscriptionRequest}
 */
proto.nokamoto.github.com.egosla.api.UpdateSubscriptionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = new proto.nokamoto.github.com.egosla.api.Subscription;
      reader.readMessage(value,proto.nokamoto.github.com.egosla.api.Subscription.deserializeBinaryFromReader);
      msg.setSubscription(value);
      break;
    case 3:
      var value = new google_protobuf_field_mask_pb.FieldMask;
      reader.readMessage(value,google_protobuf_field_mask_pb.FieldMask.deserializeBinaryFromReader);
      msg.setUpdateMask(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nokamoto.github.com.egosla.api.UpdateSubscriptionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nokamoto.github.com.egosla.api.UpdateSubscriptionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nokamoto.github.com.egosla.api.UpdateSubscriptionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nokamoto.github.com.egosla.api.UpdateSubscriptionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSubscription();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.nokamoto.github.com.egosla.api.Subscription.serializeBinaryToWriter
    );
  }
  f = message.getUpdateMask();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_field_mask_pb.FieldMask.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.nokamoto.github.com.egosla.api.UpdateSubscriptionRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.nokamoto.github.com.egosla.api.UpdateSubscriptionRequest.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Subscription subscription = 2;
 * @return {?proto.nokamoto.github.com.egosla.api.Subscription}
 */
proto.nokamoto.github.com.egosla.api.UpdateSubscriptionRequest.prototype.getSubscription = function() {
  return /** @type{?proto.nokamoto.github.com.egosla.api.Subscription} */ (
    jspb.Message.getWrapperField(this, proto.nokamoto.github.com.egosla.api.Subscription, 2));
};


/** @param {?proto.nokamoto.github.com.egosla.api.Subscription|undefined} value */
proto.nokamoto.github.com.egosla.api.UpdateSubscriptionRequest.prototype.setSubscription = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.nokamoto.github.com.egosla.api.UpdateSubscriptionRequest.prototype.clearSubscription = function() {
  this.setSubscription(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nokamoto.github.com.egosla.api.UpdateSubscriptionRequest.prototype.hasSubscription = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional google.protobuf.FieldMask update_mask = 3;
 * @return {?proto.google.protobuf.FieldMask}
 */
proto.nokamoto.github.com.egosla.api.UpdateSubscriptionRequest.prototype.getUpdateMask = function() {
  return /** @type{?proto.google.protobuf.FieldMask} */ (
    jspb.Message.getWrapperField(this, google_protobuf_field_mask_pb.FieldMask, 3));
};


/** @param {?proto.google.protobuf.FieldMask|undefined} value */
proto.nokamoto.github.com.egosla.api.UpdateSubscriptionRequest.prototype.setUpdateMask = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.nokamoto.github.com.egosla.api.UpdateSubscriptionRequest.prototype.clearUpdateMask = function() {
  this.setUpdateMask(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nokamoto.github.com.egosla.api.UpdateSubscriptionRequest.prototype.hasUpdateMask = function() {
  return jspb.Message.getField(this, 3) != null;
};


goog.object.extend(exports, proto.nokamoto.github.com.egosla.api);
