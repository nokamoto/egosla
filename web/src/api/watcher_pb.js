/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
var google_protobuf_field_mask_pb = require('google-protobuf/google/protobuf/field_mask_pb.js');
goog.exportSymbol('proto.nokamoto.github.com.egosla.api.CreateWatcherRequest', null, global);
goog.exportSymbol('proto.nokamoto.github.com.egosla.api.DeleteWatcherRequest', null, global);
goog.exportSymbol('proto.nokamoto.github.com.egosla.api.GetWatcherRequest', null, global);
goog.exportSymbol('proto.nokamoto.github.com.egosla.api.ListWatcherRequest', null, global);
goog.exportSymbol('proto.nokamoto.github.com.egosla.api.ListWatcherResponse', null, global);
goog.exportSymbol('proto.nokamoto.github.com.egosla.api.UpdateWatcherRequest', null, global);
goog.exportSymbol('proto.nokamoto.github.com.egosla.api.Watcher', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nokamoto.github.com.egosla.api.Watcher = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.nokamoto.github.com.egosla.api.Watcher.repeatedFields_, null);
};
goog.inherits(proto.nokamoto.github.com.egosla.api.Watcher, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.nokamoto.github.com.egosla.api.Watcher.displayName = 'proto.nokamoto.github.com.egosla.api.Watcher';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.nokamoto.github.com.egosla.api.Watcher.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nokamoto.github.com.egosla.api.Watcher.prototype.toObject = function(opt_includeInstance) {
  return proto.nokamoto.github.com.egosla.api.Watcher.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nokamoto.github.com.egosla.api.Watcher} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nokamoto.github.com.egosla.api.Watcher.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    keywordsList: jspb.Message.getRepeatedField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nokamoto.github.com.egosla.api.Watcher}
 */
proto.nokamoto.github.com.egosla.api.Watcher.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nokamoto.github.com.egosla.api.Watcher;
  return proto.nokamoto.github.com.egosla.api.Watcher.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nokamoto.github.com.egosla.api.Watcher} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nokamoto.github.com.egosla.api.Watcher}
 */
proto.nokamoto.github.com.egosla.api.Watcher.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addKeywords(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nokamoto.github.com.egosla.api.Watcher.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nokamoto.github.com.egosla.api.Watcher.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nokamoto.github.com.egosla.api.Watcher} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nokamoto.github.com.egosla.api.Watcher.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getKeywordsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.nokamoto.github.com.egosla.api.Watcher.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.nokamoto.github.com.egosla.api.Watcher.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated string keywords = 2;
 * @return {!Array<string>}
 */
proto.nokamoto.github.com.egosla.api.Watcher.prototype.getKeywordsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array<string>} value */
proto.nokamoto.github.com.egosla.api.Watcher.prototype.setKeywordsList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.nokamoto.github.com.egosla.api.Watcher.prototype.addKeywords = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.nokamoto.github.com.egosla.api.Watcher.prototype.clearKeywordsList = function() {
  this.setKeywordsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nokamoto.github.com.egosla.api.CreateWatcherRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nokamoto.github.com.egosla.api.CreateWatcherRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.nokamoto.github.com.egosla.api.CreateWatcherRequest.displayName = 'proto.nokamoto.github.com.egosla.api.CreateWatcherRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nokamoto.github.com.egosla.api.CreateWatcherRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.nokamoto.github.com.egosla.api.CreateWatcherRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nokamoto.github.com.egosla.api.CreateWatcherRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nokamoto.github.com.egosla.api.CreateWatcherRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    watcher: (f = msg.getWatcher()) && proto.nokamoto.github.com.egosla.api.Watcher.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nokamoto.github.com.egosla.api.CreateWatcherRequest}
 */
proto.nokamoto.github.com.egosla.api.CreateWatcherRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nokamoto.github.com.egosla.api.CreateWatcherRequest;
  return proto.nokamoto.github.com.egosla.api.CreateWatcherRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nokamoto.github.com.egosla.api.CreateWatcherRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nokamoto.github.com.egosla.api.CreateWatcherRequest}
 */
proto.nokamoto.github.com.egosla.api.CreateWatcherRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.nokamoto.github.com.egosla.api.Watcher;
      reader.readMessage(value,proto.nokamoto.github.com.egosla.api.Watcher.deserializeBinaryFromReader);
      msg.setWatcher(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nokamoto.github.com.egosla.api.CreateWatcherRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nokamoto.github.com.egosla.api.CreateWatcherRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nokamoto.github.com.egosla.api.CreateWatcherRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nokamoto.github.com.egosla.api.CreateWatcherRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWatcher();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.nokamoto.github.com.egosla.api.Watcher.serializeBinaryToWriter
    );
  }
};


/**
 * optional Watcher watcher = 1;
 * @return {?proto.nokamoto.github.com.egosla.api.Watcher}
 */
proto.nokamoto.github.com.egosla.api.CreateWatcherRequest.prototype.getWatcher = function() {
  return /** @type{?proto.nokamoto.github.com.egosla.api.Watcher} */ (
    jspb.Message.getWrapperField(this, proto.nokamoto.github.com.egosla.api.Watcher, 1));
};


/** @param {?proto.nokamoto.github.com.egosla.api.Watcher|undefined} value */
proto.nokamoto.github.com.egosla.api.CreateWatcherRequest.prototype.setWatcher = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.nokamoto.github.com.egosla.api.CreateWatcherRequest.prototype.clearWatcher = function() {
  this.setWatcher(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nokamoto.github.com.egosla.api.CreateWatcherRequest.prototype.hasWatcher = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nokamoto.github.com.egosla.api.DeleteWatcherRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nokamoto.github.com.egosla.api.DeleteWatcherRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.nokamoto.github.com.egosla.api.DeleteWatcherRequest.displayName = 'proto.nokamoto.github.com.egosla.api.DeleteWatcherRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nokamoto.github.com.egosla.api.DeleteWatcherRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.nokamoto.github.com.egosla.api.DeleteWatcherRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nokamoto.github.com.egosla.api.DeleteWatcherRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nokamoto.github.com.egosla.api.DeleteWatcherRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nokamoto.github.com.egosla.api.DeleteWatcherRequest}
 */
proto.nokamoto.github.com.egosla.api.DeleteWatcherRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nokamoto.github.com.egosla.api.DeleteWatcherRequest;
  return proto.nokamoto.github.com.egosla.api.DeleteWatcherRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nokamoto.github.com.egosla.api.DeleteWatcherRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nokamoto.github.com.egosla.api.DeleteWatcherRequest}
 */
proto.nokamoto.github.com.egosla.api.DeleteWatcherRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nokamoto.github.com.egosla.api.DeleteWatcherRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nokamoto.github.com.egosla.api.DeleteWatcherRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nokamoto.github.com.egosla.api.DeleteWatcherRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nokamoto.github.com.egosla.api.DeleteWatcherRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.nokamoto.github.com.egosla.api.DeleteWatcherRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.nokamoto.github.com.egosla.api.DeleteWatcherRequest.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nokamoto.github.com.egosla.api.GetWatcherRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nokamoto.github.com.egosla.api.GetWatcherRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.nokamoto.github.com.egosla.api.GetWatcherRequest.displayName = 'proto.nokamoto.github.com.egosla.api.GetWatcherRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nokamoto.github.com.egosla.api.GetWatcherRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.nokamoto.github.com.egosla.api.GetWatcherRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nokamoto.github.com.egosla.api.GetWatcherRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nokamoto.github.com.egosla.api.GetWatcherRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nokamoto.github.com.egosla.api.GetWatcherRequest}
 */
proto.nokamoto.github.com.egosla.api.GetWatcherRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nokamoto.github.com.egosla.api.GetWatcherRequest;
  return proto.nokamoto.github.com.egosla.api.GetWatcherRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nokamoto.github.com.egosla.api.GetWatcherRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nokamoto.github.com.egosla.api.GetWatcherRequest}
 */
proto.nokamoto.github.com.egosla.api.GetWatcherRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nokamoto.github.com.egosla.api.GetWatcherRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nokamoto.github.com.egosla.api.GetWatcherRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nokamoto.github.com.egosla.api.GetWatcherRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nokamoto.github.com.egosla.api.GetWatcherRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.nokamoto.github.com.egosla.api.GetWatcherRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.nokamoto.github.com.egosla.api.GetWatcherRequest.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nokamoto.github.com.egosla.api.ListWatcherRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nokamoto.github.com.egosla.api.ListWatcherRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.nokamoto.github.com.egosla.api.ListWatcherRequest.displayName = 'proto.nokamoto.github.com.egosla.api.ListWatcherRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nokamoto.github.com.egosla.api.ListWatcherRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.nokamoto.github.com.egosla.api.ListWatcherRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nokamoto.github.com.egosla.api.ListWatcherRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nokamoto.github.com.egosla.api.ListWatcherRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    pageToken: jspb.Message.getFieldWithDefault(msg, 1, ""),
    pageSize: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nokamoto.github.com.egosla.api.ListWatcherRequest}
 */
proto.nokamoto.github.com.egosla.api.ListWatcherRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nokamoto.github.com.egosla.api.ListWatcherRequest;
  return proto.nokamoto.github.com.egosla.api.ListWatcherRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nokamoto.github.com.egosla.api.ListWatcherRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nokamoto.github.com.egosla.api.ListWatcherRequest}
 */
proto.nokamoto.github.com.egosla.api.ListWatcherRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPageToken(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPageSize(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nokamoto.github.com.egosla.api.ListWatcherRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nokamoto.github.com.egosla.api.ListWatcherRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nokamoto.github.com.egosla.api.ListWatcherRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nokamoto.github.com.egosla.api.ListWatcherRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPageToken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPageSize();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional string page_token = 1;
 * @return {string}
 */
proto.nokamoto.github.com.egosla.api.ListWatcherRequest.prototype.getPageToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.nokamoto.github.com.egosla.api.ListWatcherRequest.prototype.setPageToken = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 page_size = 2;
 * @return {number}
 */
proto.nokamoto.github.com.egosla.api.ListWatcherRequest.prototype.getPageSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.nokamoto.github.com.egosla.api.ListWatcherRequest.prototype.setPageSize = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nokamoto.github.com.egosla.api.ListWatcherResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.nokamoto.github.com.egosla.api.ListWatcherResponse.repeatedFields_, null);
};
goog.inherits(proto.nokamoto.github.com.egosla.api.ListWatcherResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.nokamoto.github.com.egosla.api.ListWatcherResponse.displayName = 'proto.nokamoto.github.com.egosla.api.ListWatcherResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.nokamoto.github.com.egosla.api.ListWatcherResponse.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nokamoto.github.com.egosla.api.ListWatcherResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.nokamoto.github.com.egosla.api.ListWatcherResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nokamoto.github.com.egosla.api.ListWatcherResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nokamoto.github.com.egosla.api.ListWatcherResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    nextPageToken: jspb.Message.getFieldWithDefault(msg, 1, ""),
    watchersList: jspb.Message.toObjectList(msg.getWatchersList(),
    proto.nokamoto.github.com.egosla.api.Watcher.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nokamoto.github.com.egosla.api.ListWatcherResponse}
 */
proto.nokamoto.github.com.egosla.api.ListWatcherResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nokamoto.github.com.egosla.api.ListWatcherResponse;
  return proto.nokamoto.github.com.egosla.api.ListWatcherResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nokamoto.github.com.egosla.api.ListWatcherResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nokamoto.github.com.egosla.api.ListWatcherResponse}
 */
proto.nokamoto.github.com.egosla.api.ListWatcherResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNextPageToken(value);
      break;
    case 2:
      var value = new proto.nokamoto.github.com.egosla.api.Watcher;
      reader.readMessage(value,proto.nokamoto.github.com.egosla.api.Watcher.deserializeBinaryFromReader);
      msg.addWatchers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nokamoto.github.com.egosla.api.ListWatcherResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nokamoto.github.com.egosla.api.ListWatcherResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nokamoto.github.com.egosla.api.ListWatcherResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nokamoto.github.com.egosla.api.ListWatcherResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNextPageToken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getWatchersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.nokamoto.github.com.egosla.api.Watcher.serializeBinaryToWriter
    );
  }
};


/**
 * optional string next_page_token = 1;
 * @return {string}
 */
proto.nokamoto.github.com.egosla.api.ListWatcherResponse.prototype.getNextPageToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.nokamoto.github.com.egosla.api.ListWatcherResponse.prototype.setNextPageToken = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated Watcher watchers = 2;
 * @return {!Array<!proto.nokamoto.github.com.egosla.api.Watcher>}
 */
proto.nokamoto.github.com.egosla.api.ListWatcherResponse.prototype.getWatchersList = function() {
  return /** @type{!Array<!proto.nokamoto.github.com.egosla.api.Watcher>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.nokamoto.github.com.egosla.api.Watcher, 2));
};


/** @param {!Array<!proto.nokamoto.github.com.egosla.api.Watcher>} value */
proto.nokamoto.github.com.egosla.api.ListWatcherResponse.prototype.setWatchersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.nokamoto.github.com.egosla.api.Watcher=} opt_value
 * @param {number=} opt_index
 * @return {!proto.nokamoto.github.com.egosla.api.Watcher}
 */
proto.nokamoto.github.com.egosla.api.ListWatcherResponse.prototype.addWatchers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.nokamoto.github.com.egosla.api.Watcher, opt_index);
};


proto.nokamoto.github.com.egosla.api.ListWatcherResponse.prototype.clearWatchersList = function() {
  this.setWatchersList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nokamoto.github.com.egosla.api.UpdateWatcherRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nokamoto.github.com.egosla.api.UpdateWatcherRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.nokamoto.github.com.egosla.api.UpdateWatcherRequest.displayName = 'proto.nokamoto.github.com.egosla.api.UpdateWatcherRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nokamoto.github.com.egosla.api.UpdateWatcherRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.nokamoto.github.com.egosla.api.UpdateWatcherRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nokamoto.github.com.egosla.api.UpdateWatcherRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nokamoto.github.com.egosla.api.UpdateWatcherRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    watcher: (f = msg.getWatcher()) && proto.nokamoto.github.com.egosla.api.Watcher.toObject(includeInstance, f),
    updateMask: (f = msg.getUpdateMask()) && google_protobuf_field_mask_pb.FieldMask.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nokamoto.github.com.egosla.api.UpdateWatcherRequest}
 */
proto.nokamoto.github.com.egosla.api.UpdateWatcherRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nokamoto.github.com.egosla.api.UpdateWatcherRequest;
  return proto.nokamoto.github.com.egosla.api.UpdateWatcherRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nokamoto.github.com.egosla.api.UpdateWatcherRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nokamoto.github.com.egosla.api.UpdateWatcherRequest}
 */
proto.nokamoto.github.com.egosla.api.UpdateWatcherRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = new proto.nokamoto.github.com.egosla.api.Watcher;
      reader.readMessage(value,proto.nokamoto.github.com.egosla.api.Watcher.deserializeBinaryFromReader);
      msg.setWatcher(value);
      break;
    case 3:
      var value = new google_protobuf_field_mask_pb.FieldMask;
      reader.readMessage(value,google_protobuf_field_mask_pb.FieldMask.deserializeBinaryFromReader);
      msg.setUpdateMask(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nokamoto.github.com.egosla.api.UpdateWatcherRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nokamoto.github.com.egosla.api.UpdateWatcherRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nokamoto.github.com.egosla.api.UpdateWatcherRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nokamoto.github.com.egosla.api.UpdateWatcherRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getWatcher();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.nokamoto.github.com.egosla.api.Watcher.serializeBinaryToWriter
    );
  }
  f = message.getUpdateMask();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_field_mask_pb.FieldMask.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.nokamoto.github.com.egosla.api.UpdateWatcherRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.nokamoto.github.com.egosla.api.UpdateWatcherRequest.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Watcher watcher = 2;
 * @return {?proto.nokamoto.github.com.egosla.api.Watcher}
 */
proto.nokamoto.github.com.egosla.api.UpdateWatcherRequest.prototype.getWatcher = function() {
  return /** @type{?proto.nokamoto.github.com.egosla.api.Watcher} */ (
    jspb.Message.getWrapperField(this, proto.nokamoto.github.com.egosla.api.Watcher, 2));
};


/** @param {?proto.nokamoto.github.com.egosla.api.Watcher|undefined} value */
proto.nokamoto.github.com.egosla.api.UpdateWatcherRequest.prototype.setWatcher = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.nokamoto.github.com.egosla.api.UpdateWatcherRequest.prototype.clearWatcher = function() {
  this.setWatcher(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nokamoto.github.com.egosla.api.UpdateWatcherRequest.prototype.hasWatcher = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional google.protobuf.FieldMask update_mask = 3;
 * @return {?proto.google.protobuf.FieldMask}
 */
proto.nokamoto.github.com.egosla.api.UpdateWatcherRequest.prototype.getUpdateMask = function() {
  return /** @type{?proto.google.protobuf.FieldMask} */ (
    jspb.Message.getWrapperField(this, google_protobuf_field_mask_pb.FieldMask, 3));
};


/** @param {?proto.google.protobuf.FieldMask|undefined} value */
proto.nokamoto.github.com.egosla.api.UpdateWatcherRequest.prototype.setUpdateMask = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.nokamoto.github.com.egosla.api.UpdateWatcherRequest.prototype.clearUpdateMask = function() {
  this.setUpdateMask(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nokamoto.github.com.egosla.api.UpdateWatcherRequest.prototype.hasUpdateMask = function() {
  return jspb.Message.getField(this, 3) != null;
};


goog.object.extend(exports, proto.nokamoto.github.com.egosla.api);
